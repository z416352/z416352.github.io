<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>程式 - 標籤 - Joshua&#39;s Blog</title>
        <link>https://z416352.github.io/tags/%E7%A8%8B%E5%BC%8F/</link>
        <description>程式 - 標籤 - Joshua&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>ch416352@gmail.com (Joshua)</managingEditor>
            <webMaster>ch416352@gmail.com (Joshua)</webMaster><lastBuildDate>Thu, 31 Aug 2023 17:22:57 &#43;0800</lastBuildDate><atom:link href="https://z416352.github.io/tags/%E7%A8%8B%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>Kubernetes 元件介紹(1)</title>
    <link>https://z416352.github.io/posts/dev/2023/08/kubernetes_components_1/kubernetes_components_1/</link>
    <pubDate>Thu, 31 Aug 2023 17:22:57 &#43;0800</pubDate>
    <author>Joshua</author>
    <guid>https://z416352.github.io/posts/dev/2023/08/kubernetes_components_1/kubernetes_components_1/</guid>
    <description><![CDATA[Pod Pod 是可以在 Kubernetes 中創建和管理的、最小的可部署的單元。 Pod 並不是一個容器，而是容器的運行環境。每個 Pod 本身會帶著一個或多個不等的 標籤(label) 在身上，這在 service 設定的時候會使用到。
一個 Pod 內會有一個或多個 Container。但通常只會有一個主要執行的 container 而已，其餘的 container 主要是用於環境設定或輔助主 container 的作用。
在同一個 Pod 中，它們共享了儲存、網路、運算資源和設定。每一個 Pod 都有著自己的 IP 地址，其餘的程式或 Pod 都可以根據這個 IP 互相通訊。
Service Service 是運行在一個或一組 Pod 上將應用程式公開出去給其他人使用的方式。如果沒有 service，使用者在使用服務的時候會需要直接對 pod 進行溝通。可是 pod 本身是隨時可以捨棄並快速創建的，每次重新創建都會有不一樣的 IP，這樣使用者會需要不斷的修改溝通的 IP。
但有了 service 後，service 可以透過 pod 的 label 來選擇需要綁定那些 pod。將一個或多個 pod 打包在一起並提供一個持續存在的穩定 IP。service 會將 request 轉發到打包的 Pod 上。
使用者只需要連線 service IP 就可以正常的使用服務。即使打包的 pod 重新創建 IP 有變化使用者也不需要擔心。]]></description>
</item>
<item>
    <title>[Bot系列 2] 將 Telegram Bot 建立在 Docker 上</title>
    <link>https://z416352.github.io/posts/dev/2023/04/telegrambot_on_docker/telegrambot_on_docker/</link>
    <pubDate>Mon, 24 Jul 2023 21:27:29 &#43;0800</pubDate>
    <author>Joshua</author>
    <guid>https://z416352.github.io/posts/dev/2023/04/telegrambot_on_docker/telegrambot_on_docker/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage.png" referrerpolicy="no-referrer">
            </div>前言 在之前的內容中，我們提到了如何在 GCP 的 VM 上建立 Telegram Bot，相較於在本機建立，這樣的管理效率更高、更有效率。但是，仍有維護上的困難，當要執行的程式變得複雜時，就會面臨著許多問題。為了解決這些問題，我們需要使用到 Docker 技術，將先前建立的 Bot 運行在 Docker 上。這樣做的好處在於，相較於在 VM 上運行，Docker 容器更易管理。在未來，當程式規模擴大時，也可以將不同功能的程式運行在不同的容器上，再讓這些容器互相溝通。
1. Overview 1.1 Container Container 是一種虛擬化技術，它共享了操作系統 ( linux、window 等等 ) 的底層資源。每個容器互相之間是相互隔離的，這種隔離方式能夠確保每個應用程式在運行時都擁有自己的運行環境。
1.2 Docker Docker 是一個開源的容器化平台，讓開發者能夠輕鬆地構建、部署和運行應用程式。它使用容器技術，將應用程式和相關依賴項打包到一個稱為 映像檔(image) 的獨立單元中。這些 image 可以在任何支援 Docker 的環境中執行，而不需要擔心底層環境的不同。
Dockerfile: 可以當作 image 的藍圖，用於定義如何構建 image。內容包含了設定環境、複製檔案、執行指令等等的內容。描述了應用程式的環境和運行時配置，我們可以透過 Dockerfile 來創建我們的 image。
Image: 它包含了執行應用程式所需的所有內容：程式碼、依賴項、庫和環境變數。不只可以自己建立 image 外，也可以透過 Docker Hub 來下載其他人或官方包裝好的 image
Container: 是 image 的一個 實例(instance)，是輕量級、獨立和可移植的，比起將應用程式執行在 VM 中，在 container 中執行可以更快速地啟動、停止和刪除。每個容器都是隔離的，可以避免應用程式之間的干擾。但安全性方面則遜於 VM
流程大概可以總結成這樣
2. Build Image 由於 Container 的建立需要透過 Image，所以我們需要先將我們上一章寫出來的程式包裝成 Image]]></description>
</item>
<item>
    <title>如何在 GCP 上建立自己的 Kubernetes</title>
    <link>https://z416352.github.io/posts/dev/2023/02/kubernetes_tutorial_gcp/kubernetes_tutorial_gcp/</link>
    <pubDate>Mon, 26 Jun 2023 14:56:07 &#43;0800</pubDate>
    <author>Joshua</author>
    <guid>https://z416352.github.io/posts/dev/2023/02/kubernetes_tutorial_gcp/kubernetes_tutorial_gcp/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage.png" referrerpolicy="no-referrer">
            </div>前言 Google Cloud Platform (GCP) 是由 Google 推出的雲端計算平台，提供各種雲端運算資源，包括虛擬機器、儲存等等。GCP 可以解決使用者本地電腦穩定性不足或是配備不夠的問題，使用者可以透過 GCP 創建屬於自己的虛擬機器，進而進行開發、分析資料或架設系統等等的工作。如果是新帳號使用者可以利用90天或300美金的體驗期來滿足自己短期的需求。
1. 準備 在 GCP 上建立虛擬機 進入到 GCP 網站 中開始使用， 啟用 Compute Engine 功能。 點選 VM 執行個體後建立執行個體，區域的部分就近選擇台灣即可 其餘我採用的配備是 e2-medium (2 個 vCPU，4 GB 記憶體) Ubuntu 20.04 LTS (x86/64) 硬碟大小 50GB 這邊會需要配置兩台 VM 來充當 K8s 的 Master Node 和 Worker Node，配置完成後應該會可以看到跟下圖一樣的畫面 Kubernetes 安裝版本為 1.26.0-00 點選 SSH 就可以進入到 VM 的終端機操作畫面 到這邊在 GCP 上建立 VM 的內容就結束了，接下來就是如何將 Kubernetes 安裝在這兩台 VM 上面運行
2. Master &amp; Worker node 設定 2.]]></description>
</item>
<item>
    <title>[Bot系列 1] 在 GCP 上面建立一個自己的 Telegram Bot</title>
    <link>https://z416352.github.io/posts/dev/2023/04/telegrambot_gcp/telegrambot_gcp/</link>
    <pubDate>Sat, 22 Apr 2023 00:19:45 &#43;0800</pubDate>
    <author>Joshua</author>
    <guid>https://z416352.github.io/posts/dev/2023/04/telegrambot_gcp/telegrambot_gcp/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/2023-04-22-TelegramBot_GCP-20230620013056.png" referrerpolicy="no-referrer">
            </div>前言 如果你想要在 GCP 上建立一個免費的 Telegram Bot，需要準備以下幾個東西：
GCP VM 固定的 IP 位址 Flask nginx、ngrok 因為 Telegram 傳送給 Bot 的訊息需要走 HTTPS，所以還需要擁有自己的網域和 SSL 憑證。在這部份，我們可以透過使用 nip.io 以及 certbot 來達成。
1. GCP 在 GCP 上，每個 Google 帳號都可以免費試用 90 天或 300 美元的額度，因此我們可以在 GCP 上建立 VM 或 Kubernetes 而不需要花費任何費用。
首先，我們需要在 GCP 上建立一個 VM 作為我們的開發環境，同時作為 Bot 的執行地方，並使用 Ubuntu 20.04 作為軟體平台。在建立 VM 後，VM 的外部 IP 位址預設是臨時的，這意味著每當 VM 重啟時 IP 位址可能會更改。這會導致每次都需要重新設定 Webhook 的位置。因此，我們可以按照下圖所示的方式進行修改。
進去之後就依照妳想要的做填寫，&ldquo;連接到:&rdquo; 的部分則選擇妳剛剛創建的 VM ，最後就可以看到如第一張圖一樣 &ldquo;外部 IP 位址&rdquo; 已經變成固定的。]]></description>
</item>
</channel>
</rss>
