<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Kubernetes - 標籤 - Joshua&#39;s Blog</title>
        <link>https://z416352.github.io/tags/kubernetes/</link>
        <description>Kubernetes - 標籤 - Joshua&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>ch416352@gmail.com (Joshua)</managingEditor>
            <webMaster>ch416352@gmail.com (Joshua)</webMaster><lastBuildDate>Sun, 29 Oct 2023 23:04:10 &#43;0800</lastBuildDate><atom:link href="https://z416352.github.io/tags/kubernetes/" rel="self" type="application/rss+xml" /><item>
    <title>Gcloud and Artifact Registry</title>
    <link>https://z416352.github.io/posts/dev/2023/11/gcloud_and_artifact_registry/gcloud-and-artifact-registry/</link>
    <pubDate>Sun, 29 Oct 2023 23:04:10 &#43;0800</pubDate>
    <author>Joshua</author>
    <guid>https://z416352.github.io/posts/dev/2023/11/gcloud_and_artifact_registry/gcloud-and-artifact-registry/</guid>
    <description><![CDATA[Gcloud 可以參考 官網 目前的最新版本
下載檔案 &amp; 解壓縮 1 2 3 curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-452.0.1-linux-x86_64.tar.gz tar -xf google-cloud-cli-452.0.1-linux-x86_64.tar.gz 執行安裝 1 ./google-cloud-sdk/install.sh 初始化設定 1 ./google-cloud-sdk/bin/gcloud init Artifact Registry 可以參考 這篇 的 Artifact Registry 部分
首先需要進行身分驗證，可以在 ~/.docker/config.json 中看到目前有的 Region。其中 asia-east1-docker.pkg.dev 要根據自己當初建立 Artifact 所在的地區改寫 1 2 3 gcloud auth configure-docker asia-east1-docker.pkg.dev cat ~/.docker/config.json Image 結構 在 docker build 的時候需要命名為這種結構 asia-east1-docker.pkg.dev/&lt;Project ID&gt;/&lt;Repo Name&gt;/&lt;Image Name&gt;:&lt;Version&gt;，指令如下 1 docker build -t asia-east1-docker.pkg.dev/&lt;Project ID&gt;/&lt;Repo Name&gt;/&lt;Image Name&gt;:&lt;Version&gt; . &lt;Project ID&gt;: 可以透過 GCP 上看到目前專案的 ID &lt;Repo Name&gt;: 建立 Artifact Registry 時的名字 &lt;Image Name&gt;: Image 的名稱 &lt;Version&gt;: Image 的版本號 將 image 推上 Artifact 1 docker push asia-east1-docker.]]></description>
</item>
<item>
    <title>Kubernetes 元件介紹(1)</title>
    <link>https://z416352.github.io/posts/dev/2023/08/kubernetes_components_1/kubernetes_components_1/</link>
    <pubDate>Thu, 31 Aug 2023 17:22:57 &#43;0800</pubDate>
    <author>Joshua</author>
    <guid>https://z416352.github.io/posts/dev/2023/08/kubernetes_components_1/kubernetes_components_1/</guid>
    <description><![CDATA[Pod Pod 是可以在 Kubernetes 中創建和管理的、最小的可部署的單元。 Pod 並不是一個容器，而是容器的運行環境。每個 Pod 本身會帶著一個或多個不等的 標籤(label) 在身上，這在 service 設定的時候會使用到。
一個 Pod 內會有一個或多個 Container。但通常只會有一個主要執行的 container 而已，其餘的 container 主要是用於環境設定或輔助主 container 的作用。
在同一個 Pod 中，它們共享了儲存、網路、運算資源和設定。每一個 Pod 都有著自己的 IP 地址，其餘的程式或 Pod 都可以根據這個 IP 互相通訊。
Service Service 是運行在一個或一組 Pod 上將應用程式公開出去給其他人使用的方式。如果沒有 service，使用者在使用服務的時候會需要直接對 pod 進行溝通。可是 pod 本身是隨時可以捨棄並快速創建的，每次重新創建都會有不一樣的 IP，這樣使用者會需要不斷的修改溝通的 IP。
但有了 service 後，service 可以透過 pod 的 label 來選擇需要綁定那些 pod。將一個或多個 pod 打包在一起並提供一個持續存在的穩定 IP。service 會將 request 轉發到打包的 Pod 上。
使用者只需要連線 service IP 就可以正常的使用服務。即使打包的 pod 重新創建 IP 有變化使用者也不需要擔心。]]></description>
</item>
<item>
    <title>如何在 GCP 上建立自己的 Kubernetes</title>
    <link>https://z416352.github.io/posts/dev/2023/02/kubernetes_tutorial_gcp/kubernetes_tutorial_gcp/</link>
    <pubDate>Mon, 26 Jun 2023 14:56:07 &#43;0800</pubDate>
    <author>Joshua</author>
    <guid>https://z416352.github.io/posts/dev/2023/02/kubernetes_tutorial_gcp/kubernetes_tutorial_gcp/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage.png" referrerpolicy="no-referrer">
            </div>前言 Google Cloud Platform (GCP) 是由 Google 推出的雲端計算平台，提供各種雲端運算資源，包括虛擬機器、儲存等等。GCP 可以解決使用者本地電腦穩定性不足或是配備不夠的問題，使用者可以透過 GCP 創建屬於自己的虛擬機器，進而進行開發、分析資料或架設系統等等的工作。如果是新帳號使用者可以利用90天或300美金的體驗期來滿足自己短期的需求。
1. 準備 在 GCP 上建立虛擬機 進入到 GCP 網站 中開始使用， 啟用 Compute Engine 功能。 點選 VM 執行個體後建立執行個體，區域的部分就近選擇台灣即可 其餘我採用的配備是 e2-medium (2 個 vCPU，4 GB 記憶體) Ubuntu 20.04 LTS (x86/64) 硬碟大小 50GB 這邊會需要配置兩台 VM 來充當 K8s 的 Master Node 和 Worker Node，配置完成後應該會可以看到跟下圖一樣的畫面 Kubernetes 安裝版本為 1.26.0-00 點選 SSH 就可以進入到 VM 的終端機操作畫面 到這邊在 GCP 上建立 VM 的內容就結束了，接下來就是如何將 Kubernetes 安裝在這兩台 VM 上面運行
2. Master &amp; Worker node 設定 2.]]></description>
</item>
</channel>
</rss>
